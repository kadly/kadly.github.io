import io
import logging

from aiogram import Router, F, Bot
from aiogram.types import Message, ContentType
from aiogram.enums import ParseMode
from aiogram.exceptions import TelegramBadRequest, TelegramNetworkError, TelegramForbiddenError

from src.services.gemini import get_elder_image_analysis
from src.utils.message_splitter import edit_or_send_long_message

router = Router(name="image-analysis-router")
logger = logging.getLogger(__name__)

# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è (–≤ –±–∞–π—Ç–∞—Ö), –Ω–∞–ø—Ä–∏–º–µ—Ä, 15 –ú–ë
MAX_FILE_SIZE_BYTES = 15 * 1024 * 1024

@router.message(F.content_type == ContentType.PHOTO)
async def handle_photo_analysis(message: Message, bot: Bot):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.
    """
    # ---- –ù–∞—á–∞–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏ ---- (–£—Ä–æ–≤–µ–Ω—å 0 –æ—Ç—Å—Ç—É–ø–∞)

    if not message.photo:
        logger.warning("–°–æ–æ–±—â–µ–Ω–∏–µ —Å ContentType.PHOTO –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç message.photo")
        return # –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, –µ—Å–ª–∏ –Ω–µ—Ç —Ñ–æ—Ç–æ

    # –í—ã–±–∏—Ä–∞–µ–º —Ñ–æ—Ç–æ –Ω–∞–∏–±–æ–ª—å—à–µ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
    photo = message.photo[-1] # –£—Ä–æ–≤–µ–Ω—å 1 –æ—Ç—Å—Ç—É–ø–∞

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
    if photo.file_size is not None and photo.file_size > MAX_FILE_SIZE_BYTES:
        await message.answer("üö´ –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–º –º–µ–Ω–µ–µ 15 –ú–ë.")
        return

    status_message = None # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
    try:
        status_message = await message.reply("‚è≥ –ü–æ–ª—É—á–∏–ª –≤–∞—à –≥—Ä–∞—Ñ–∏–∫. –û—Ç–ø—Ä–∞–≤–ª—è—é –¥–æ–∫—Ç–æ—Ä—É –≠–ª–¥–µ—Ä—É –Ω–∞ –∞–Ω–∞–ª–∏–∑... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.")
    except TelegramForbiddenError:
        logger.warning(f"–ù–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id} - –≤–æ–∑–º–æ–∂–Ω–æ, –±–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
        return # –ù–µ –º–æ–∂–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å, –Ω–µ—Ç —Å–º—ã—Å–ª–∞ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}: {e}")
        return # –ï—Å–ª–∏ –¥–∞–∂–µ —Å—Ç–∞—Ç—É—Å –Ω–µ —É—à–µ–ª, –¥–∞–ª—å—à–µ —Å–ª–æ–∂–Ω–æ

    # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    image_bytes = None
    image_bytes_io = io.BytesIO()
    try:
        downloaded_file = await bot.get_file(photo.file_id)
        if downloaded_file.file_size is not None and downloaded_file.file_size > MAX_FILE_SIZE_BYTES:
             # –î–æ–ø. –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ
             await status_message.edit_text("üö´ –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–º –º–µ–Ω–µ–µ 15 –ú–ë.")
             return

        logger.info(f"–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ {downloaded_file.file_path}...")
        await bot.download_file(downloaded_file.file_path, destination=image_bytes_io)
        image_bytes = image_bytes_io.getvalue()
        logger.info(f"–§–∞–π–ª —Å–∫–∞—á–∞–Ω, —Ä–∞–∑–º–µ—Ä: {len(image_bytes) / 1024:.1f} KB")

    except TelegramNetworkError as e:
        logger.error(f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ Telegram –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ {photo.file_id}: {e}")
        await status_message.edit_text("üö´ –ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–µ—Ç—å—é –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ –∏–∑ Telegram. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.")
        return
    except TelegramBadRequest as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram API (Bad Request) –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ {photo.file_id}: {e}")
        await status_message.edit_text("üö´ –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ Telegram (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ–≤–µ—Ä–Ω—ã–π ID). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
        return
    except Exception as e: # –õ–æ–≤–∏–º –¥—Ä—É–≥–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏ download
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ {photo.file_id}: {e}", exc_info=True)
        await status_message.edit_text("üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –Ω–∞ –∞–Ω–∞–ª–∏–∑. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
    finally:
        image_bytes_io.close() # –í—Å–µ–≥–¥–∞ –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ—Ç–æ–∫

    if not image_bytes:
        logger.warning("–°–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –æ–∫–∞–∑–∞–ª—Å—è –ø—É—Å—Ç—ã–º –∏–ª–∏ –Ω–µ –±—ã–ª –ø–æ–ª—É—á–µ–Ω.")
        await status_message.edit_text("üö´ –°–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –æ–∫–∞–∑–∞–ª—Å—è –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    user_caption = message.caption # –¢–µ–∫—Å—Ç –ø–æ–¥–ø–∏—Å–∏ –∫ —Ñ–æ—Ç–æ

    logger.info(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –∞–Ω–∞–ª–∏–∑ –≥—Ä–∞—Ñ–∏–∫–∞ –æ—Ç user_id={message.from_user.id}. Caption: '{user_caption}'")

    # ---- –û—Å–Ω–æ–≤–Ω–æ–π –±–ª–æ–∫ –∞–Ω–∞–ª–∏–∑–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ ----
    try: # <--- –ù–ê–ß–ê–õ–û –í–ù–ï–®–ù–ï–ì–û TRY (–£—Ä–æ–≤–µ–Ω—å 1 –æ—Ç—Å—Ç—É–ø–∞)
        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∞–Ω–∞–ª–∏–∑–∞ –∏–∑ —Å–µ—Ä–≤–∏—Å–∞ Gemini
        analysis_result = await get_elder_image_analysis(user_caption, image_bytes) # –£—Ä–æ–≤–µ–Ω—å 2
        
        await edit_or_send_long_message(
            target_message=status_message,
            text=analysis_result,
            parse_mode=ParseMode.MARKDOWN
        )

    except Exception as e: # <--- –í–ù–ï–®–ù–ò–ô EXCEPT (–£—Ä–æ–≤–µ–Ω—å 1 –æ—Ç—Å—Ç—É–ø–∞). –í–û–¢ –ó–î–ï–°–¨ –ë–´–õ–ê –û–®–ò–ë–ö–ê. –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ –æ–¥–Ω–æ–º —É—Ä–æ–≤–Ω–µ —Å –≤–Ω–µ—à–Ω–∏–º try.
        # –õ–æ–≤–∏–º –æ—à–∏–±–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥–ª–∏ –ø—Ä–æ–∏–∑–æ–π—Ç–∏ –≤ get_elder_image_analysis
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}", exc_info=True) # –£—Ä–æ–≤–µ–Ω—å 2
        try:
            await status_message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Å–µ—Ä—å–µ–∑–Ω–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞. –ö–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∞ (–Ω–∞–¥–µ—é—Å—å). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", parse_mode=None) # –£—Ä–æ–≤–µ–Ω—å 3
        except Exception as final_e:
             logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–∞–∂–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {final_e}") # –£—Ä–æ–≤–µ–Ω—å 3

# ---- –ö–æ–Ω–µ—Ü —Ñ—É–Ω–∫—Ü–∏–∏ ----