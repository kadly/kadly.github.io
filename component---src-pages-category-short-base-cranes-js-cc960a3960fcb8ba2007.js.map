{"version":3,"file":"component---src-pages-category-short-base-cranes-js-cc960a3960fcb8ba2007.js","mappings":"4JAGA,MAAMA,EAAeC,EAAAA,QAAOC,IAAG,gFAAVD,CAAU,kJAazBE,EAAeF,EAAAA,QAAOC,IAAG,gFAAVD,CAAU,oHAUzBG,EAAiBH,EAAAA,QAAOC,IAAG,kFAAVD,CAAU,sEAO3BI,EAAOJ,EAAAA,QAAOK,IAAG,wEAAVL,CAAU,6BAKjBM,EAAYN,EAAAA,QAAOC,IAAG,6EAAVD,CAAU,4JAwBtBO,EAAcP,EAAAA,QAAOQ,OAAM,+EAAbR,CAAa,iJAwCjC,IA1BqB,IAA0C,IAAzC,OAAES,EAAM,QAAEC,EAAO,eAAEC,GAAgB,EACvD,OAAKF,EAKH,gBAACV,EAAY,CAACa,QAASF,GACrB,gBAACR,EAAY,CAACU,QAAUC,GAAMA,EAAEC,mBAC9B,0BAAI,yBACJ,gBAACX,EAAc,KACb,qBAAGY,KAAK,6BAA6BC,OAAO,SAASC,IAAI,uBACvD,gBAACb,EAAI,CAACc,IAAI,wEAAwEC,IAAI,cAExF,qBAAGJ,KAAK,2BAA2BC,OAAO,SAASC,IAAI,uBACrD,gBAACb,EAAI,CAACc,IAAI,mEAAmEC,IAAI,eAGrF,gBAACb,EAAS,KACPK,EAAiB,gBAACA,EAAc,MAAM,mCAEzC,gBAACJ,EAAW,CAACK,QAASF,GAAS,aAlB5B,IAoBQ,C,oFC3FnB,MAAMU,EAAkB,CACtB,SAAU,SAAU,SAAU,WA2EhC,UAxE4B,KAC1B,MAAM,EAACC,EAAY,EAACC,IAAkBC,EAAAA,EAAAA,WAAS,GAEzCC,EAAkB,KACtBF,GAAe,EAAK,EAOhBG,GAASC,EAAAA,EAAAA,IAAe,cAexBC,EAAiBC,IACrB,MAAMC,EAAYJ,EAAOK,QAAQC,MAAMC,MAAKC,GAAQA,EAAKC,KAAKC,OAASP,IACvE,OAAOC,GAAYO,EAAAA,EAAAA,GAASP,EAAUK,KAAKG,iBAAmB,IAAI,EAGpE,OACE,gBAACC,EAAM,KACL,gBAACC,EAAM,KACL,0BAAI,uBACJ,gBAAC,KAAI,CAACC,GAAG,KACP,0BAAI,aAEN,gBAACC,EAAW,KACV,yBAAG,kBACH,yBACE,gBAACC,EAAW,KACV,qBAAG3B,KAAK,wBAAuB,qBAEjC,gBAAC4B,EAAU,CAAC5B,KAAK,uBACf,gBAAC6B,EAAY,CAAC1B,IAAI,0GAA0GC,IAAI,sBAKxI,gBAAC0B,EAAS,KACR,gBAACC,EAAI,KACF1B,EAAgB2B,KAAKnB,GACpB,gBAACoB,EAAI,CAACC,IAAKrB,EAAOhB,QAASY,GACxBG,EAAcC,GACb,gBAAC,EAAAsB,EAAW,CAACC,MAAOxB,EAAcC,GAAQT,IAAKS,IAE/C,yBAAG,YAEL,0BAAKA,QAKb,gBAAC,IAAY,CAACnB,OAAQY,EAAaX,QAzDpB,KACjBY,GAAe,EAAM,IAyDnB,gBAAC8B,EAAM,KACL,yBAAG,MAAQ,IAAIC,MAAOC,cAAc,8CAE/B,EAMb,MAAMf,EAASvC,EAAAA,QAAOuD,OAAM,gFAAbvD,CAAa,0hBA0CtByC,EAAczC,EAAAA,QAAOC,IAAG,qFAAVD,CAAU,mLAcxBoD,EAASpD,EAAAA,QAAOwD,OAAM,gFAAbxD,CAAa,iFAQtB6C,EAAY7C,EAAAA,QAAOC,IAAG,mFAAVD,CAAU,gEAOtB8C,EAAO9C,EAAAA,QAAOC,IAAG,8EAAVD,CAAU,kEAOjBgD,EAAOhD,EAAAA,QAAOC,IAAG,8EAAVD,CAAU,gOAiBjB4C,EAAe5C,EAAAA,QAAOK,IAAG,sFAAVL,CAAU,iIAWzB2C,EAAa3C,EAAAA,QAAOyD,EAAC,oFAARzD,CAAQ,sEAMrB0C,EAAc1C,EAAAA,QAAO0D,KAAI,qFAAX1D,CAAW,8HAYzBsC,EAAStC,EAAAA,QAAOC,IAAG,gFAAVD,CAAU,yD","sources":["webpack://gatsby-starter-default/./src/components/ModalContact.js","webpack://gatsby-starter-default/./src/pages/category/short-base-cranes.js"],"sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst ModalOverlay = styled.div`\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  background: rgba(0, 0, 0, 0.6);\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  z-index: 1000;\r\n`;\r\n\r\nconst ModalContent = styled.div`\r\n  background: #fff;\r\n  padding: 2rem;\r\n  border-radius: 8px;\r\n  max-width: 450px; /* Немного уменьшаем ширину окна */\r\n  width: 100%;\r\n  position: relative;\r\n  text-align: center; /* Центрируем заголовок и логотипы */\r\n`;\r\n\r\nconst IconsContainer = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  gap: 1rem;\r\n  margin-bottom: 1rem;\r\n`;\r\n\r\nconst Icon = styled.img`\r\n  width: 40px;\r\n  height: 40px;\r\n`;\r\n\r\nconst ModelText = styled.div`\r\n  margin: 1rem 0;\r\n  font-size: 16px;\r\n  \r\n  /* Заголовок модели оставляем по центру */\r\n  h3 {\r\n    text-align: center;\r\n  }\r\n  \r\n  /* Список отображаем как блок, выровненный по левому краю */\r\n  ul {\r\n    list-style: none;\r\n    padding: 0;\r\n    margin: 0 auto;\r\n    max-width: 90%;\r\n    text-align: left;\r\n  }\r\n  \r\n  li {\r\n    /* Пункты списка по умолчанию выравниваются по левому краю */\r\n    margin-bottom: 0.5rem;\r\n  }\r\n`;\r\n\r\nconst CloseButton = styled.button`\r\n  background: #006f3d;\r\n  color: #fff;\r\n  border: none;\r\n  padding: 0.5rem 1rem;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  margin-top: 1rem;\r\n\r\n  &:hover {\r\n    background: #00532d;\r\n  }\r\n`;\r\n\r\nconst ModalContact = ({ isOpen, onClose, ModelComponent }) => {\r\n  if (!isOpen) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <ModalOverlay onClick={onClose}>\r\n      <ModalContent onClick={(e) => e.stopPropagation()}>\r\n        <h2>Связаться с продавцом</h2>\r\n        <IconsContainer>\r\n          <a href=\"https://telegram.me/gmitry\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n            <Icon src=\"https://upload.wikimedia.org/wikipedia/commons/8/82/Telegram_logo.svg\" alt=\"Telegram\" />\r\n          </a>\r\n          <a href=\"https://wa.me/7231280168\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n            <Icon src=\"https://upload.wikimedia.org/wikipedia/commons/6/6b/WhatsApp.svg\" alt=\"WhatsApp\" />\r\n          </a>\r\n        </IconsContainer>\r\n        <ModelText>\r\n          {ModelComponent ? <ModelComponent /> : \"Информация о модели недоступна.\"}\r\n        </ModelText>\r\n        <CloseButton onClick={onClose}>Закрыть</CloseButton>\r\n      </ModalContent>\r\n    </ModalOverlay>\r\n  );\r\n};\r\n\r\nexport default ModalContact;\r\n","import React, { useState } from 'react';\r\nimport { Link } from \"gatsby\";\r\nimport { GatsbyImage, getImage } from \"gatsby-plugin-image\";\r\nimport { graphql, useStaticQuery } from \"gatsby\";\r\nimport styled from \"styled-components\";\r\nimport ModalContact from '../../components/ModalContact';\r\n\r\nconst shortbasecranes = [\r\n  \"ZRT400\", \"ZRT600\", \"ZRT850\", \"ZRT1100\"\r\n];\r\n\r\nconst ShortbasecranesPage = () => {\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n\r\n  const handleCardClick = () => {\r\n    setIsModalOpen(true);\r\n  };\r\n\r\n  const closeModal = () => {\r\n    setIsModalOpen(false);\r\n  };\r\n\r\n  const images = useStaticQuery(graphql`\r\n    query {\r\n      allFile(filter: { relativeDirectory: { eq: \"short-base-cranes\" } }) {\r\n        edges {\r\n          node {\r\n            name\r\n            childImageSharp {\r\n              gatsbyImageData(width: 300, layout: CONSTRAINED)\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `);\r\n\r\n  const getModelImage = (model) => {\r\n    const imageNode = images.allFile.edges.find(edge => edge.node.name === model);\r\n    return imageNode ? getImage(imageNode.node.childImageSharp) : null;\r\n  };\r\n\r\n  return (\r\n    <Layout>\r\n      <Header>\r\n        <h1>Краны короткобазные</h1>\r\n        <Link to=\"/\">\r\n          <h2>Zoomlion</h2>\r\n        </Link>\r\n        <ContactInfo>\r\n          <p>г. Новосибирск</p>\r\n          <p>\r\n            <ContactItem>\r\n              <a href=\"tel:+7-923-708-22-54\">+7-923-708-22-54</a>\r\n            </ContactItem>\r\n            <StyledLink href=\"https://t.me/gmitry\">\r\n              <TelegramLogo src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/8/82/Telegram_logo.svg/512px-Telegram_logo.svg.png\" alt=\"Telegram logo\"/>\r\n            </StyledLink>\r\n          </p>\r\n        </ContactInfo>\r\n      </Header>\r\n      <Container>\r\n        <Grid>\r\n          {shortbasecranes.map((model) => (\r\n            <Card key={model} onClick={handleCardClick}>\r\n              {getModelImage(model) ? (\r\n                <GatsbyImage image={getModelImage(model)} alt={model} />\r\n              ) : (\r\n                <p>Нет фото</p>\r\n              )}\r\n              <h3>{model}</h3>\r\n            </Card>\r\n          ))}\r\n        </Grid>\r\n      </Container>\r\n      <ModalContact isOpen={isModalOpen} onClose={closeModal} />\r\n      <Footer>\r\n        <p>&copy; {new Date().getFullYear()} Зумлион индустри. 25 лет на рынке в мире</p>\r\n      </Footer>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default ShortbasecranesPage;\r\n\r\nconst Header = styled.header`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 20px;\r\n  background: linear-gradient(to right, #333 85%, #666);\r\n  color: white;\r\n\r\n  h1 {\r\n    margin: 0;\r\n    font-size: 24px;\r\n  }\r\n\r\n  a {\r\n    text-decoration: none;\r\n    color: black;\r\n  }\r\n\r\n  h2 {\r\n    margin: 0;\r\n    font-size: 56px;\r\n    color: #006f3d;\r\n    font-weight: bold;\r\n    margin-left: 10px;\r\n    text-shadow: 0 0 8px rgba(255, 255, 255, 0.6), 0 0 10px rgba(255, 255, 255, 0.5);\r\n    -webkit-text-stroke: 1px #fff;\r\n    letter-spacing: 2px;\r\n    animation: fadeIn 1s ease-in-out;\r\n\r\n    @keyframes fadeIn {\r\n      from {\r\n        opacity: 0;\r\n        transform: translateY(-10px);\r\n      }\r\n      to {\r\n        opacity: 1;\r\n        transform: translateY(0);\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst ContactInfo = styled.div`\r\n  text-align: right;\r\n  font-size: 20px;\r\n  font-weight: bold;\r\n  color: #00c851;\r\n  text-shadow: 0 0 10px rgba(0, 200, 81, 0.7);\r\n  letter-spacing: 1px;\r\n  padding: 5px 15px;\r\n  border-radius: 8px;\r\n  p {\r\n    margin: 5px 0;\r\n  }\r\n`;\r\n\r\nconst Footer = styled.footer`\r\n  text-align: center;\r\n  padding: 20px;\r\n  background: #333;\r\n  color: white;\r\n  margin-top: auto;\r\n`;\r\n\r\nconst Container = styled.div`\r\n  padding: 20px;\r\n  max-width: 1200px;\r\n  margin: 0 auto;\r\n  flex: 1 0 auto;\r\n`;\r\n\r\nconst Grid = styled.div`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 20px;\r\n  justify-content: center;\r\n`;\r\n\r\nconst Card = styled.div`\r\n  border: 1px solid #ddd;\r\n  border-radius: 8px;\r\n  overflow: hidden;\r\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\r\n  text-align: center;\r\n  background: #fff;\r\n  padding: 16px;\r\n  flex: 1 1 calc(33.333% - 20px);\r\n  cursor: pointer;\r\n\r\n  h3 {\r\n    margin: 10px 0;\r\n    font-size: 18px;\r\n  }\r\n`;\r\n\r\nconst TelegramLogo = styled.img`\r\n  height: 40px;\r\n  width: 40px;\r\n  margin-left: 10px;\r\n  vertical-align: middle;\r\n  transition: transform 0.3s ease;\r\n  &:hover {\r\n    transform: scale(1.1);\r\n  }\r\n`;\r\n\r\nconst StyledLink = styled.a`\r\n  text-decoration: none;\r\n  display: inline-block;\r\n  vertical-align: middle;\r\n`;\r\n\r\nconst ContactItem = styled.span`\r\n  & > a {\r\n    transition: transform 0.3s ease, color 0.3s ease;\r\n    display: inline-block;\r\n    color: #00c851;\r\n\r\n    &:hover {\r\n      transform: scale(1.02);\r\n    }\r\n  }\r\n`;\r\n\r\nconst Layout = styled.div`\r\n  display: flex;\r\n  min-height: 100vh;\r\n  flex-direction: column;\r\n`;\r\n"],"names":["ModalOverlay","styled","div","ModalContent","IconsContainer","Icon","img","ModelText","CloseButton","button","isOpen","onClose","ModelComponent","onClick","e","stopPropagation","href","target","rel","src","alt","shortbasecranes","isModalOpen","setIsModalOpen","useState","handleCardClick","images","useStaticQuery","getModelImage","model","imageNode","allFile","edges","find","edge","node","name","getImage","childImageSharp","Layout","Header","to","ContactInfo","ContactItem","StyledLink","TelegramLogo","Container","Grid","map","Card","key","G","image","Footer","Date","getFullYear","header","footer","a","span"],"sourceRoot":""}